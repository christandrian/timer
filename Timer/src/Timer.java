
import java.awt.Color;
import java.awt.Font;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Christophe
 */
public class Timer extends javax.swing.JFrame {

    /**
     * Creates new form Timer
     */
    boolean play;
    long period;

    public Timer() {
        initComponents();
        this.TimerControl.setVisible(true);
        this.TimerControl.setSize(360, 230);
        this.TimerControl.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TimerControl = new javax.swing.JFrame();
        stop = new javax.swing.JButton();
        start = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        minute = new javax.swing.JTextField();
        second = new javax.swing.JTextField();
        set = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        preset5 = new javax.swing.JButton();
        preset10 = new javax.swing.JButton();
        preset30 = new javax.swing.JButton();
        preset40 = new javax.swing.JButton();
        preset15 = new javax.swing.JButton();
        preset60 = new javax.swing.JButton();
        showTime = new javax.swing.JLabel();
        alert = new javax.swing.JCheckBox();
        Review = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        judul = new javax.swing.JLabel();
        panelWaktu = new javax.swing.JPanel();
        timerDisp = new javax.swing.JLabel();

        TimerControl.setPreferredSize(new java.awt.Dimension(355, 250));

        stop.setText("STOP");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        start.setText("START");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        minute.setText("0");

        second.setText("0");

        set.setText("SET");
        set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setActionPerformed(evt);
            }
        });

        jLabel9.setText("M");

        jLabel10.setText("S");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(second)
                    .addComponent(minute))
                .addGap(20, 20, 20)
                .addComponent(set)
                .addGap(18, 18, 18))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(second, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(set)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.setText("TIMER");

        preset5.setText("5 MENIT");
        preset5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preset5ActionPerformed(evt);
            }
        });

        preset10.setText("10 MENIT");
        preset10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preset10ActionPerformed(evt);
            }
        });

        preset30.setText("30 MENIT");
        preset30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preset30ActionPerformed(evt);
            }
        });

        preset40.setText("40 MENIT");
        preset40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preset40ActionPerformed(evt);
            }
        });

        preset15.setText("15 MENIT");
        preset15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preset15ActionPerformed(evt);
            }
        });

        preset60.setText("60 MENIT");
        preset60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preset60ActionPerformed(evt);
            }
        });

        showTime.setText("SHOW");

        alert.setText("ALERT?");

        javax.swing.GroupLayout TimerControlLayout = new javax.swing.GroupLayout(TimerControl.getContentPane());
        TimerControl.getContentPane().setLayout(TimerControlLayout);
        TimerControlLayout.setHorizontalGroup(
            TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TimerControlLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(TimerControlLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(TimerControlLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alert)
                            .addGroup(TimerControlLayout.createSequentialGroup()
                                .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(preset5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(preset30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TimerControlLayout.createSequentialGroup()
                                        .addComponent(preset10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(preset15))
                                    .addGroup(TimerControlLayout.createSequentialGroup()
                                        .addComponent(preset40)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(preset60)))))))
                .addGap(11, 11, 11)
                .addComponent(showTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        TimerControlLayout.setVerticalGroup(
            TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TimerControlLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TimerControlLayout.createSequentialGroup()
                        .addComponent(start)
                        .addGap(18, 18, 18)
                        .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stop)
                            .addComponent(showTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(alert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preset5)
                    .addComponent(preset10)
                    .addComponent(preset15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(TimerControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preset40)
                    .addComponent(preset30)
                    .addComponent(preset60))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Keterangan", "Waktu", "Durasi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout ReviewLayout = new javax.swing.GroupLayout(Review.getContentPane());
        Review.getContentPane().setLayout(ReviewLayout);
        ReviewLayout.setHorizontalGroup(
            ReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReviewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        ReviewLayout.setVerticalGroup(
            ReviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReviewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        judul.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        judul.setText("GEREJA UTUSAN PANTEKOSTA DI INDONESIA JEMAAT BANDUNG");

        panelWaktu.setBackground(new java.awt.Color(255, 255, 255));
        panelWaktu.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        timerDisp.setBackground(new java.awt.Color(51, 51, 51));
        timerDisp.setFont(new java.awt.Font("Tahoma", 0, 490)); // NOI18N
        timerDisp.setText("00:00");
        timerDisp.setPreferredSize(new java.awt.Dimension(1250, 690));

        javax.swing.GroupLayout panelWaktuLayout = new javax.swing.GroupLayout(panelWaktu);
        panelWaktu.setLayout(panelWaktuLayout);
        panelWaktuLayout.setHorizontalGroup(
            panelWaktuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWaktuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timerDisp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelWaktuLayout.setVerticalGroup(
            panelWaktuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelWaktuLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(timerDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(panelWaktu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, 1202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelWaktu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        play = false;// TODO add your handling code here:
    }//GEN-LAST:event_stopActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if (play == true) {
            play = false;
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {

            }
            play = true;

        } else {
            play = true;

        }
        this.TimerThread();
    }//GEN-LAST:event_startActionPerformed

    private void setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setActionPerformed
        int mm, ss;

        mm = Integer.parseInt(minute.getText());
        ss = Integer.parseInt(second.getText());

        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            set.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            set.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
    }//GEN-LAST:event_setActionPerformed

    private void preset5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preset5ActionPerformed
        int mm, ss;

        mm = 5;
        ss = 0;

        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            preset5.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            preset5.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_preset5ActionPerformed

    private void preset10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preset10ActionPerformed
        int mm, ss;

        mm = 10;
        ss = 0;
        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            preset10.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            preset10.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_preset10ActionPerformed

    private void preset15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preset15ActionPerformed
        int mm, ss;

        mm = 15;
        ss = 0;
        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            preset15.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            preset15.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_preset15ActionPerformed

    private void preset30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preset30ActionPerformed
        int mm, ss;

        mm = 30;
        ss = 0;
        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            preset30.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            preset30.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_preset30ActionPerformed

    private void preset40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preset40ActionPerformed
        int mm, ss;

        mm = 40;
        ss = 0;
        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            preset40.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            preset40.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_preset40ActionPerformed

    private void preset60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preset60ActionPerformed
        int mm, ss;

        mm = 60;
        ss = 0;
        String mm_, ss_;
        if (Integer.toString(mm).length() == 1) {
            mm_ = "0" + mm;
        } else {
            mm_ = "" + mm;
        }

        if (Integer.toString(ss).length() == 1) {
            ss_ = "0" + ss;
        } else {
            ss_ = "" + ss;
        }
        this.timerDisp.setFont(new Font("Tahoma", 0, 490));
        panelWaktu.setBackground(Color.WHITE);
        this.timerDisp.setForeground(Color.BLACK);
        if (play == true) {
            preset60.setForeground(Color.BLUE);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
            }
            preset60.setForeground(Color.getColor("F0F0F0"));
        } else {
            this.setDisp(mm_ + ":" + ss_);
        }

        period = mm * 60 + ss;// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_preset60ActionPerformed

    public void setDisp(String disp) {

        showTime.setText(disp);
        timerDisp.setText(disp);

    }

    public void TimerThread() {

        try {
            Runnable r = new Runnable() {
                public void run() {

                    startTimer();

                }
            };
            Thread Timer = new Thread(r, "Timer Thread");
            Timer.start();
        } catch (Exception exc) {
        }
    }

    public void startTimer() {
        int m, s;
        try {
            for (int i = (int) period; i >= 0 && play; i--) {
                m = (int) (i / 60);

                s = (int) (i % 60);

                String mm_, ss_;
                if (Integer.toString(m).length() == 1) {
                    mm_ = "0" + m;
                } else {
                    mm_ = "" + m;
                }

                if (Integer.toString(s).length() == 1) {
                    ss_ = "0" + s;
                } else {
                    ss_ = "" + s;
                }

                if (i <= 300 && i > 60) {
                    if (alert.isSelected()) {
                        panelWaktu.setBackground(Color.RED);
                        this.timerDisp.setForeground(Color.WHITE);
                    } else {
                        panelWaktu.setBackground(Color.WHITE);
                        this.timerDisp.setForeground(Color.BLACK);
                    }
                } else if (i <= 60) {
                    if (i % 2 == 0) {
                        panelWaktu.setBackground(Color.WHITE);
                        this.timerDisp.setForeground(Color.BLACK);
                    } else {
                        if (alert.isSelected()) {
                            panelWaktu.setBackground(Color.RED);
                            this.timerDisp.setForeground(Color.WHITE);
                        } else {
                            panelWaktu.setBackground(Color.WHITE);
                            this.timerDisp.setForeground(Color.BLACK);
                        }

                    }
                } else {

                    panelWaktu.setBackground(Color.WHITE);
                    this.timerDisp.setForeground(Color.BLACK);
                }
                this.setDisp(mm_ + ":" + ss_);

                //this.setDisp(m + " : " + s);
//                if(i==0){
//                     new AePlayWave("beep2.wav").start(); 
//                }
                Thread.sleep(1000);
                // new AePlayWave("beep3.wav").start();
            }
        } catch (Exception exc) {
        }
        int ct = 0;
        if (play != false) {
            this.setDisp("TIME OUT");
            this.timerDisp.setFont(new Font("Tahoma", 0, 273));
            while (play != false) {

                if (ct % 2 == 0) {
                    panelWaktu.setBackground(Color.WHITE);
                    this.timerDisp.setForeground(Color.BLACK);
                } else {

                    if (alert.isSelected()) {
                        panelWaktu.setBackground(Color.RED);
                        this.timerDisp.setForeground(Color.WHITE);
                    } else {
                        panelWaktu.setBackground(Color.WHITE);
                        this.timerDisp.setForeground(Color.BLACK);
                    }
                }

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    // Logger.getLogger(Timer.class.getName()).log(Level.SEVERE, null, ex);
                }
                ct++;
            }
            //  new AePlayWave("beep2.wav").start(); 
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Timer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Timer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Timer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Timer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Timer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame Review;
    private javax.swing.JFrame TimerControl;
    private javax.swing.JCheckBox alert;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel judul;
    private javax.swing.JTextField minute;
    private javax.swing.JPanel panelWaktu;
    private javax.swing.JButton preset10;
    private javax.swing.JButton preset15;
    private javax.swing.JButton preset30;
    private javax.swing.JButton preset40;
    private javax.swing.JButton preset5;
    private javax.swing.JButton preset60;
    private javax.swing.JTextField second;
    private javax.swing.JButton set;
    private javax.swing.JLabel showTime;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private javax.swing.JTable table;
    private javax.swing.JLabel timerDisp;
    // End of variables declaration//GEN-END:variables
}
